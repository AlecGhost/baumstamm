/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function getPersons() {
    return invoke()<Person[]>("get_persons")
}

export function addParent(rid: RelationshipId) {
    return invoke()<[PersonId, RelationshipId]>("add_parent", { rid })
}

export function addChild(rid: RelationshipId) {
    return invoke()<PersonId>("add_child", { rid })
}

export function addNewRelationship(pid: PersonId) {
    return invoke()<RelationshipId>("add_new_relationship", { pid })
}

export function addRelationshipWithPartner(pid: PersonId, partnerPid: PersonId) {
    return invoke()<RelationshipId>("add_relationship_with_partner", { pid,partnerPid })
}

export function insertInfo(pid: PersonId, key: string, value: string) {
    return invoke()<null>("insert_info", { pid,key,value })
}

export function removeInfo(pid: PersonId, key: string) {
    return invoke()<string>("remove_info", { pid,key })
}

export function displayGraph(options: DisplayOptions) {
    return invoke()<DisplayGraph>("display_graph", { options })
}

export type RelationshipId = string
export type Node = { value: string; parents: (string | null)[]; children: string[] }
export type PersonId = string
export type DisplayGraph = Graph
export type Person = { id: PersonId; info: { [key: string]: string } | null }
export type DisplayOptions = { start: string; retain_edges: { [key: string]: (string | null)[] } }
export type Graph = { sources: string[]; nodes: Node[] }
